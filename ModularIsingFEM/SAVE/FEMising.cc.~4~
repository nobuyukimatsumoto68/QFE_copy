/* 
(1) Goal Maximally Simple FEM Ising on a flat Triangular lattice
with arbitray length {a,b,c} = axes[3]

(2) Model of Efficient Data Parallel Code.
Do Metropolis, Wolff and Swendens Wang by HK algorithm.

(3) NO C++ but take from Evan element when and if useful
from newFEM/ising_s2_crit. and later for our old FEM routines. 
*/

#include <cmath>
#include <cstdio>
#include <string>
#include <iostream>
#include "ising.h"

using namespace  std;

int main()
{  
  struct param p;

  // BEGIN SET PARAMETERS 
  p.L =  2;
  p.latVol = p.L * p.L;
  p.beta =  0.41;
  int spin[p.latVol];
  double  vec[][2] = {
    {1.0,0.0},
    {-0.5,sqrt(3.)/2.0},
    {- 0.5,- sqrt(3.)/2.0}
  };

  for(int i=0; i<3; i++) {
   for(int j=0;j<2;j++) 
     p.axis[i][j] = vec[i][j];
   };
  
  for(int i = 0; i< 3; i++){
    p.abc[i] = sqrt( p.axis[i][0] * p.axis[i][0]+ p.axis[i][1] * p.axis[i][1] );
    printf("abc = %.12f \n" , p.abc[i]);
  }
  p.A = Area(p);  printf("Area =  %.12f \n", p.A);
  p.R = Rcircum(p);  printf("Rcircum =  %.12f \n", p.R);
  
 // END SET PARAMETERS


  for(int site1 = 0; site1 < p.latVol; site1++){
    printf("i = %d \n",site1);
    for(int site2 = 0; site2 < p.latVol; site2++)
      {
  double rvec[2];
  double delta_x = Mod(site1%p.L,site2%p.L,p.L);
  double delta_y = Mod(site1/p.L, site2/p.L, p.L); 
  rvec[0] =  delta_x * p.axis[0][0] +  delta_y * p.axis[1][0];
  rvec[1] =  delta_x * p.axis[0][1] +  delta_y * p.axis[1][1];
  printf("j :  %d, r = ( %0.4f,%0.4f ) \n", site2, rvec[0],  rvec[1]);
    }
  }
 
  
  
  
#if 1 
  for(int site1 = 0; site1 < p.latVol; site1++){
    printf("i = %d",site1);
    for(int site2 = 0; site2 < p.latVol; site2++)
      {
	printf(" %.4f", distance(site1, site2,  p) );
      }
    printf(" \n ");
  }
#endif

 

  HotStart(spin, p);
  ColdStart(spin,p);
  
  for(int iter = 0; iter < 8; iter++)
    { 
   printf("Metrapolis accept :  %.12f     ",  Metropolis(spin,  p));
   printf("Action after Metropolis    %.12f \n", IsingAction(spin, p));
   printf("Wolff Cluster Size   %d  ", WolffUpdate(spin, p) );
    printf("Action after Wolff is  %.12f  \n", IsingAction(spin, p));
    };
  
  return 0;
}


